---
layout: post
status: publish
published: true
permalink: how-i-dumped-sublime-for-vim
title: How I Dumped Sublime for Vim
author:
  display_name: Christian
  login: xntrik
  email: xntrik@un-excogitate.org
  url: ''
author_login: xntrik
author_email: xntrik@un-excogitate.org
date: '2016-02-15 17:00:00 +0000'
date_gmt: '2016-02-15 17:00:00 +0000'
tags:
- Personal
- work
- development
- tools
---
<p>Like most people that spend a lot of time working in source code, I'm a huge fan of <a href="https://www.sublimetext.com/">Sublime Text</a>. Sure, for years <a href="https://twitter.com/antisnatchor">@antisnatchor</a> and <a href="https://twitter.com/wadealcorn">@wadealcorn</a> used to try and convince me to shift to <a href="https://www.jetbrains.com/ruby/">RubyMine</a>, or other IDEs, particularly when working on things like <a href="http://www.beefproject.com/">www.beefproject.com</a> where debugging issues would get significantly easier. But as most of my work was done on an older model 11" Macbook Air, as soon as I opened RubyMine, the performance hit was too much, and I found myself back in familiar Sublime with a few terminal windows open for debugging, tailing logs and so on.</p>
<p>During my brief period of not working last year, I thought to myself: everything I do now in Sublime, while feeling very natural to how I work, is probably something I could do in Vim. Having now been motivated by <a href="https://twitter.com/0x1c">@0x1c's</a> transition to a full-fledged Vim-thought-leader, I thought I should write down some of the things I used to do in Sublime, which I now do in Vim, and the benefits I'm seeing.</p>
<p>I should disclaim though, I'm no Vim expert. I learn new things every week, and do have a few bad habits that I'm struggling to change. But this is one of the things I like about Vim, and there's a few people I know (in addition to @0x1c) that always do things that I see and go: whoa.</p>
<p>The other benefit of this period of transition to Vim is that in my new setup, I use a Macbook Pro for all my desktop work, but I have a dedicated Linux workstation with way more <em>oomph</em> than I need, which I do 90% of my development work on. While there are tricks that allow you to use Sublime directly on remote files via SSH (see <a href="https://github.com/henrikpersson/rsub">Rsub</a>), and NoMachine is great for responsive remote desktop, I've found it's much easier to simply use Vim over SSH. And this is where I introduce my second life-saver, <a href="https://tmux.github.io/">tmux</a>.</p>
<p>Similar to my transition to Vim from Sublime, my transition from using screen to tmux is something that I've only done recently (in the past couple of years). When I first started playing around with Linux, if you ever needed to leave a task or app running and wanted to be able to disconnect from the server, screen was the defacto way to achieve this. Tmux to me feels like screen on steroids. Particularly when it comes to window and pane management in a terminal environment. Using tmux is relatively straightforward, after you've opened up your terminal (I use iTerm2 on OSX), or SSHed into your server, you simply start <code>tmux</code> (or reattach to a previous session with <code>tmux attach</code>). By default tmux uses the <code>Ctrl+b</code> command for it's hotkey, a lot of people remap it to <code>Ctrl+a</code> to work the same way as screen, but I've just adjusted to <code>Ctrl+b</code>. So for instance, to detach from tmux you hit <code>Ctrl+b</code> then <code>d</code>. To see a list of available keys you can hit <code>Ctrl+b</code> then <code>?</code>.</p>
<p>Tmux commands I frequently use:
<ul>
<li><code>Ctrl+b</code> <code>c</code> - create a new window</li>
<li><code>Ctrl+b</code> <code>1-9</code> - changes window</li>
<li><code>Ctrl+b</code> <code>n</code> - changes to the next window (<code>p</code> changes to the previous)</li>
<li><code>Ctrl+b</code> <code>,</code> - renames the window</li>
<li><code>Ctrl+b</code> <code>%</code> - splits the current window vertically</li>
<li><code>Ctrl+b</code> <code>"</code> - splits the current window horizontally</li>
<li><code>Ctrl+b</code> <code>z</code> - zoom the current pane fullscreen - I use this a LOT to focus on a particular Vim session</li>
</ul>
</p>
<p><blockquote class="imgur-embed-pub" lang="en" data-id="x57h3sn"><a href="//imgur.com/x57h3sn">View post on imgur.com</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script></p>
<p>Tmux also has a command interface available in <code>Ctrl+b</code> then <code>:</code> Once in this mode you can execute longer tmux commands (of course you can re-map these too). One of the commands I frequently use within here is the <code>movew -r</code> command, if I happen to have exited out of a window and the numbers are out of order this renumbers the available windows in sequential order.</p>
<p>In general what I'll end up with is two iTerm windows, one with a tmux for my local machine, the other with a tmux for my workstation. To differentiate between them I've adjusted the status background colour to red on my workstation. This is done within tmux's config file, located at <code>~/.tmux.conf</code>. On each of these I'll have multiple windows, usually named in the project or workspace I'm currently working on. More often than not, the window will be filled with Vim, but when I need to tail files, or run other commands, I'll use tmux split commands to split the window in half, or quarters etc. Moving around tmux panes is as simple as <code>Ctrl+b</code> <code>h</code>, <code>j</code>, <code>k</code> or <code>l</code>, similar to moving in Vim, mapped within my tmux.conf file. When I need to focus on just the development work I'll zoom that pane (<code>Ctrl+b</code> <code>z</code>). Tmux is great because it'll indicate in the window's name whether a pane is zoomed or not. This window splitting, focusing & zooming is primarily how I'll work within a particular project.</p>
<p>Enough about tmux, let's talk about Vim.</p>
<p>Firstly, the power of Vim, even without plugins, is astounding. Just look at some of the ridiculous things you can do <a href="http://www.rayninfo.co.uk/vimtips.html">here</a>. Now, I'm not going to cover too much of the basics, but let me just say that over time, while I used to really enjoy the â€˜tab' interface within Vim, I realised that it was just a poor-person's way of using Vim's <a href="http://vim.wikia.com/wiki/Vim_buffer_FAQ">buffers</a>. To help navigate buffers, I'll usually use the CtrlP plugin (see below), but I've also installed the <a href="https://github.com/jeetsukumaran/vim-buffergator">Buffergator plugin</a>. Buffergator provides a <code>&lt;Leader&gt; b</code> command shortcut to open a simple list of open buffers. I'll often then use the <code>Ctrl+n</code> or <code>Ctrl+p</code> commands within Buffergator to quickly change the buffer in the active pane. And if you haven't played around the Leader commands, you can read more <a href="http://usevim.com/2012/07/20/vim101-leader/">here</a> (Thanks to <a href="https://twitter.com/hipikat">@hipikat</a> for talking to me about this years back).</p>
<p>To help install plugins, I use <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>, which allows me to simply git clone Vim plugins into <code>~/.vim/bundle</code> folder.</p>
<p>The first functionality I liked in Sublime that I wanted to cater for in Vim was the file explorer. Now, I know that Vim has an in-built <a href="http://vim.wikia.com/wiki/File_explorer">explorer</a>, but I've settled on the <a href="https://github.com/scrooloose/nerdtree">Nerdtree plugin</a>. Nerdtree is great, is opened/closed with <code>Ctrl+n</code> (in my config), and behaves much like a file explorer should. Within Nerdtree, I'll often use <code>s</code> to open the highlighted document in a vertical split, or <code>i</code> for a horizontal.</p>
<p>With regards to splits, I've mapped <code>Ctrl+h</code> or <code>j</code> or <code>k</code> or <code>l</code> keys to navigate Vim windows. Other window commands I'll use include window resizing, for instance to evenly size windows with <code>Ctrl+w</code> <code>=</code>, or to resize windows with commands such as <code>Ctrl+w</code> <code>+</code> or <code>-</code> to change the height, or <code>Ctrl+w</code> <code>&gt;</code> or <code>&lt;</code> to change the width. You can prepend a number in front of the <code>+</code>, <code>-</code>, <code>&gt;</code> or <code>&lt;</code> signs to change the size but that amount.</p>
<p>For those who have used Sublime for a while have likely come across Ctrl+p (or Command+p), also known as the Goto Anything capability. Great feature, and makes it very quick to open files in the current workspace or directory structure. Luckily, the <a href="https://github.com/ctrlpvim/ctrlp.vim">ctrlp plugin</a> for Vim recreates this functionality, plus a few extra things I use a lot. First and foremost is the fuzzy file searching, by simply hitting <code>Ctrl+p</code> and start typing the filename. I've also mapped <code>;</code> to open ctrlp in buffer mode. This allows a quick way to find open buffers. From within the ctrlp interface, you move up and down the available options with <code>Ctrl+j</code> or <code>k</code>, and then open with <code>Enter</code>, or <code>Ctrl+v</code> for vertical split (<code>x</code> for horizontal). Ctrlp also allows you to select multiple documents, and then open them all.</p>
<p>Another great feature in Sublime is the search all file feature. This is where the <a href="https://github.com/rking/ag.vim">ag plugin</a> comes to the rescure. Ag is actually a frontend to <a href="https://github.com/ggreer/the_silver_searcher">The Silver Searcher</a>, a code searching tool similar to Ack. Ag is a quick way to find references or other text quickly within the current Vim folder (you can see where this is by the <code>:pwd</code> command). To execute, you run <code>:Ag! &lt;searchterm&gt;</code>. I use the <code>!</code> to not automatically open the first selected document, my preference is to use the <a href="http://usevim.com/2012/08/24/vim101-quickfix/">Quickfix</a> to navigate up and down with <code>j</code> and <code>k</code>, and then <code>v</code> or <code>h</code> to open the selected document.</p>
<p>The final feature which I occasionally use is <a href="https://github.com/majutsushi/tagbar">Tagbar</a>, this opens and dynamically builds a tags sidebar, allowing you to quickly see functions, methods and so on. The use of tags, and ag come into play is where I need to quickly find reference code, or where functions are defined. If you're fortunate and have all the libraries and dependencies in the same workspace, you can generate your ctag references from the shell (<code>$ ctags -R .</code>) and then simply <code>Ctrl+]</code> on functions to find their definitions. Often if this doesn't work, what I'll often do is yank the selected word or function into a register, and quickly drop that into ag for searching. For instance, I'll shift the cursor to the start of the word (<code>b</code> can quickly move the cursor for you), then yank the word into the unnamed register with <code>yw</code>. Then entering <code>:Ag! Ctrl+r " &lt;enter&gt;</code> will execute the Ag command, against the last item in the register. You can see what's in all your registers with the <code>:reg</code> command. Registers are super handy if you want to copy and paste different content around.</p>
<p>I'm likely to look back on this post in a year or so and have drastically changed my approach, but that's one of the great things about Vim.</p>
<p>Not that I keep it up to date, but some of my config is cloned to <a href="https://github.com/xntrik/dotfools">https://github.com/xntrik/dotfools</a></p>
<p>Enjoy!</p>
